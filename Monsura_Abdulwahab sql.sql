-- Northwind traders project

-- use database
use northwind;

-- check tables in the database
show tables;

-- check informations in the tables
select * from products;
select * from `order details`;
select count(distinct customerid) from orders;
select * from customers;

-- Revenue generated on each order
select *, (unitprice * quantity) as Total_revenue from `order details`;

-- Total revenue generated = 1354458.5900
select sum(unitprice * quantity) as Total_revenue from `order details`;

-- total no of orders and revenue generated by each orderID
 select orderID, count(unitprice * quantity) as `total number of orders by orderID`,
 sum(unitprice * quantity) as `total revenue generated by orderID`
 from `order details`
 group by orderid
 order by orderid;
 
 -- SALES BY PRODUCT, PRODUCTCATEGORY, REGION, AND TIME
 -- total sales by product
 select p.productName, sum(od.unitprice * od.quantity) 
 as `total revenue generated by product`
 from `order details` as od 
 join products as P on p.productid = od.productid
 group by p.productName
 order by `total revenue generated by product` desc;
 
 -- total sales by categories
  select c.categoryname, sum(od.unitprice * od.quantity) 
 as `total revenue generated by product`
 from `order details` as od 
 join products as P on p.productid = od.productid
 join categories as c on c.CategoryID = p.CategoryID
 group by c.categoryname
 order by `total revenue generated by product` desc;
 
 -- total sales by region
 
select r.RegionDescription, SUM(od.UnitPrice * od.Quantity) AS `total revenue generated by product`
from region as r
join (
    select distinct t.RegionID, et.EmployeeID
    from territories as t
    join employeeterritories as et on et.TerritoryID = t.TerritoryID
) as distinct_employees on distinct_employees.RegionID = r.RegionID
join employees as e on e.EmployeeID = distinct_employees.EmployeeID
join orders as o on o.EmployeeID = e.EmployeeID
join `order details` as od on od.OrderID = o.OrderID
group by r.RegionDescription
order by `total revenue generated by product` desc;

 -- total sales by time 

 -- year
 select year(o.orderdate) as year, sum(od.unitprice * od.quantity) 
 as `total revenue generated by product`from `order details` as od 
 join orders as o on o.orderid  = od.orderid
 group by year
 order by `total revenue generated by product` desc;
 
 -- month
 select monthname(o.orderdate) as month, sum(od.unitprice * od.quantity) 
 as `total revenue generated by product`from `order details` as od 
 join orders as o on o.orderid  = od.orderid
 group by month
 order by `total revenue generated by product` desc;
 
 -- quarter
 select quarter(o.orderdate) as quarterly, sum(od.unitprice * od.quantity) 
 as `total revenue generated by product`from `order details` as od 
 join orders as o on o.orderid  = od.orderid
 group by quarterly
 order by `total revenue generated by product` desc;
 
-- CUSTOMER PURCHASE PATTERN AND ORDER HISTORY

-- write a query that returns total number of orders made between 1996 and 1998 = 830

SELECT COUNT( distinct od.orderid) FROM `order details` AS OD
JOIN orders AS o ON OD.orderid = O.orderid
WHERE YEAR(o.orderdate) BETWEEN '1996' AND '1998';

-- total no of orders per year
select count(orderid) as `number of orders per year`, year(orderdate) as year from orders
group by year
order by `number of orders per year` desc;

-- Total number of orders and total spending per customer(frequency and monetary)
select c.customerid, c.companyname, count(distinct od.orderid) as `total number of orders by customers`,
sum(unitprice * quantity) as `total revenue generated by customerID`
from `order details` as od
join orders as o on o.orderid = od.orderid
join customers as c on c.CustomerID = o.CustomerID
group by c.customerid
order by `total revenue generated by customerID` desc;

-- average no of orders per customers = 24.2135
with cte_avgorders as
( select c.CustomerID, count(o.orderid) as `ordercount`
from `order details` as od
join orders as o on o.orderid = od.orderid
join customers as c on c.CustomerID = o.CustomerID
group by c.CustomerID
)

select avg(cte.ordercount) as averageorders from cte_avgorders as cte;


-- Number of customers that ordered more than average = 33
WITH cte_avgorders AS (
SELECT c.CompanyName, c.CustomerID, COUNT(od.orderid) AS ordercount
FROM `order details` AS od 
JOIN orders AS o ON o.orderid = od.orderid
JOIN customers AS c ON c.CustomerID = o.CustomerID
GROUP BY c.CompanyName, c.CustomerID
)

SELECT COUNT(cte.CompanyName) FROM cte_avgorders AS cte
WHERE cte.ordercount >= (SELECT AVG(ordercount) AS averageorders FROM cte_avgorders);

-- Number of customers that ordered less than average = 56
WITH cte_avgorders AS (
SELECT c.CompanyName, c.CustomerID, COUNT(od.orderid) AS ordercount
FROM `order details` AS od 
JOIN orders AS o ON o.orderid = od.orderid
JOIN customers AS c ON c.CustomerID = o.CustomerID
GROUP BY c.CompanyName, c.CustomerID
)

SELECT COUNT(cte.CompanyName) FROM cte_avgorders AS cte
WHERE cte.ordercount < (SELECT AVG(ordercount) AS averageorders FROM cte_avgorders);


-- customers who have never made an order = 4
select c.customerid from customers as c
left join orders as o on o.customerID = c.customerid
where o.orderid is null;

-- top 5 customers with the highest spending
delimiter //
create procedure top_n_customers (in n_customer int)
begin
select c.customerid, c.companyname, count(od.orderid) as `total number of orders by customers`,
sum(unitprice * quantity) as `total revenue generated by customerID`
from `order details` as od
join orders as o on o.orderid = od.orderid
join customers as c on c.CustomerID = o.CustomerID
group by c.customerid
order by `total revenue generated by customerID` desc
limit n_customer;
end //
delimiter ;
call top_n_customers(5);

-- top 5 customers with the lowest spending
delimiter //
create procedure bottom_n_customers (in n_customer int)
begin
select c.customerid, c.companyname, count(od.orderid) as `total number of orders by customers`,
sum(unitprice * quantity) as `total revenue generated by customerID`
from `order details` as od
join orders as o on o.orderid = od.orderid
join customers as c on c.CustomerID = o.CustomerID
group by c.customerid
order by `total revenue generated by customerID` asc
limit n_customer;
end //
delimiter ;
call bottom_n_customers(5);

-- average spending per order  = 1631.87781928
with avgorders as (
select o.OrderID, sum(unitprice * quantity) as `Total spending` from `order details` as od
join orders as o on o.OrderID = od.OrderID
group by o.OrderID)

select avg(`Total spending`) from avgorders;

-- Total number of orders that's higher than average = 40
with total_average_spender as (
    select o.orderID, sum(od.unitprice * od.quantity) as average_spending 
    from `order details` as od
    join orders as o on o.orderid = od.orderid
    join customers as c on c.CustomerID = o.CustomerID
    group by o.OrderID
    having avg(od.unitprice * od.quantity) >= 1631.87781928
    order by o.OrderID
)
select count(cte.orderID) 
from total_average_spender as cte;

-- Total number of orders that lower than average = 790
with total_average_spender as (
    select o.orderID, sum(od.unitprice * od.quantity) as average_spending 
    from `order details` as od
    join orders as o on o.orderid = od.orderid
    join customers as c on c.CustomerID = o.CustomerID
    group by o.OrderID
    having avg(od.unitprice * od.quantity) < 1631.87781928
    order by o.OrderID
)
select count(cte.orderID) 
from total_average_spender as cte;

-- total number of customers that spends higher than average = 23
with high_average_spender as
(select c.CustomerID, avg(unitprice * quantity) as `average spending` 
from `order details` as od
join orders as o on o.orderid = od.orderid
join customers as c on c.CustomerID = o.CustomerID
group by c.customerid
having `average spending` >
(select avg(unitprice * quantity) as `average spending` from `order details` as od)
order by `average spending` desc)

select count(cte.customerid) from high_average_spender as cte;

-- total number of customers that spends below average = 66
with less_average_spender as
(select c.CustomerID, avg(unitprice * quantity) as `average spending` 
from `order details` as od
join orders as o on o.orderid = od.orderid
join customers as c on c.CustomerID = o.CustomerID
group by c.customerid
having `average spending` <
(select avg(unitprice * quantity) as `average spending` from `order details` as od)
order by `average spending` desc)

select count(cte.customerid) from less_average_spender as cte;

-- top 5 products generating the most revenue
select p.ProductName, ca.categoryname,
sum(od.unitprice * od.quantity) as `total revenue generated by customerID`
from `order details` as od
join orders as o on o.orderid = od.orderid
join customers as c on c.CustomerID = o.CustomerID
join products as p on p.ProductID = od.ProductID
join categories as ca on ca.categoryid = p.CategoryID
group by p.productname, ca.CategoryName
order by `total revenue generated by customerID` desc
limit 5;


-- products and category contributing the least revenue
select p.ProductName, ca.categoryname,
sum(od.unitprice * od.quantity) as `total revenue generated by customerID`
from `order details` as od
join orders as o on o.orderid = od.orderid
join customers as c on c.CustomerID = o.CustomerID
join products as p on p.ProductID = od.ProductID
join categories as ca on ca.categoryid = p.CategoryID
group by p.productname, ca.CategoryName
order by `total revenue generated by customerID` desc
limit 5;


-- top 5 products category with the largest quantity sold
select ca.categoryname, count(o.OrderID) as `purchase order`
from orders as o
join `order details` as od on od.orderid = o.orderid
join products as p on p.ProductID = od.ProductID
join categories as ca on ca.categoryid = p.CategoryID
group by ca.categoryname
order by `purchase order` desc
limit 5;


-- customer segmentation based on their spending
select c.customerid,
case
when avg(od.unitprice * od.quantity) > 628.51906729 then 'high spender'
when avg(od.unitprice * od.quantity) < 628.51906729 then 'low spender'
else 'average spender'
end as customer_spendinghabit
from `order details` as od
join orders as o on o.orderid = od.orderid
join customers as c on c.CustomerID = o.CustomerID
group by c.customerid;

-- Top 20% of customers driving the most revenue

with revenuepercustomer as (
select c.customerid, c.companyname, count(od.orderid) AS `total_number_of_orders_by_customer`,
sum(od.unitprice * od.quantity) as `total_revenue_generated_by_customer`
from `order details` as od
join orders as o on o.orderid = od.orderid
join customers as c on c.CustomerID = o.CustomerID
group by c.customerid
order by `total_revenue_generated_by_customer` desc
),

cumulativerev as (
select customerid, CompanyName, `total_revenue_generated_by_customer`,
sum(`total_revenue_generated_by_customer`) over (order by `total_revenue_generated_by_customer` desc) as cumulativerevenue,
sum(`total_revenue_generated_by_customer`) over() as Totaloverallrevenue,
row_number() over (order by `total_revenue_generated_by_customer` desc) as ranking 
from revenuepercustomer
)

select customerid, companyname, `total_revenue_generated_by_customer`, cumulativerevenue,
round((cumulativerevenue / Totaloverallrevenue) * 100, 2) as cumulativepercentage, ranking
from cumulativerev
order by `total_revenue_generated_by_customer` desc;


-- OPERATIONAL DATA ON ORDER FUFILLMENT AND DELIVERY TIMES

-- average freight
select avg(Freight) from orders;

-- Total freight 
select sum(freight) from orders;

-- average freight per year
select year(orderdate) as year, avg(Freight) from orders
group by year;

-- Total freight per year
select year(orderdate) as year, sum(Freight) from orders
group by year;

-- Freight per order by year
with year_totalorders as(
select year(orderdate) as year, count(orderid) as `orders per year` from orders
group by year
order by `orders per year` desc),
year_sumfreight as(
select year(orderdate) as year, sum(Freight) as freightsum from orders
group by year)

select yto.year, (ysf.freightsum/ yto.`orders per year`) as `freight per order` from year_totalorders as yto
join year_sumfreight as ysf on ysf.year = yto.year
group by year;

-- write a query to return the orders that were delivered late
select o.orderid, c.companyname, concat_ws(' ', e.firstname, e.lastname) ,
datediff(requireddate, shippeddate) as `order days` from orders as o
join customers as c on c.customerid = o.customerid
join employees e on e.employeeid = o.employeeid
having `order days` < 0;

-- write a query to return that groups orders into early, late, not delivered and same day
create view delivery_status as
select concat_ws(' ', firstname, e.lastname) as fullname, c.companyname, s.CompanyName as shippername,
 o.Freight,
  case
      when datediff(o.requireddate, o.shippeddate) > 0 THEN "early"
       when datediff(o.requireddate, o.shippeddate) = 0 THEN "same day"
       when o.ShippedDate is null then "not delivered yet"
       else "late"
 end as delivery_status
from orders as o
join employees e on e.employeeid = o.employeeid
join customers c on c.customerid = o.CustomerID
join shippers s on s.ShipperID = o.ShipVia;


-- write a query to return that groups orders into early, late, not delivered and same day in year 1998
select concat_ws(' ', firstname, e.lastname) as fullname, o.OrderDate, o.RequiredDate, c.companyname, s.CompanyName as shippername,
 o.Freight,
  case
      when datediff(o.requireddate, o.shippeddate) > 0 THEN "early"
       when datediff(o.requireddate, o.shippeddate) = 0 THEN "same day"
       when o.ShippedDate is null then "not delivered yet"
       else "late"
 end as delivery_status
from orders as o
join employees e on e.employeeid = o.employeeid
join customers c on c.customerid = o.CustomerID
join shippers s on s.ShipperID = o.ShipVia
where year(o.orderdate) = 1998;

-- Customer information to be transferred to powerbi

create view customerdata as
select od.orderid, od.unitprice, od.quantity, od.discount,o.OrderDate, o.RequiredDate,
o.ShippedDate, o.freight, o.ShipCountry, p.ProductName, c.CompanyName, c.country,
c.ContactTitle, c.City, ca.CategoryName, s.CompanyName as shippername,
concat_ws(' ', e.firstname, e.lastname) as `employee fullname`, e.Salary, e.Title,
e.TitleOfCourtesy from customers as c
join orders as o on o.CustomerID = c.CustomerID
join `order details` as od on od.OrderID = o.OrderID
join products as p on p.productid = od.productid
join categories as ca on ca.CategoryID = p.CategoryID
join shippers as s on s.ShipperID = o.ShipVia
join employees as e on o.EmployeeID = e.EmployeeID;

